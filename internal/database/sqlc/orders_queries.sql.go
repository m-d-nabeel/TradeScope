// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one

INSERT INTO orders (
    user_id, symbol, order_type, quantity, price, status
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
`

type CreateOrderParams struct {
	UserID    pgtype.UUID
	Symbol    string
	OrderType string
	Quantity  pgtype.Numeric
	Price     pgtype.Numeric
	Status    string
}

// orders_queries.sql
// Create a new order
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.Symbol,
		arg.OrderType,
		arg.Quantity,
		arg.Price,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

// Delete an order by ID
func (q *Queries) DeleteOrder(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
FROM orders
WHERE id = $1
`

// Get an order by ID
func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderCountByStatus = `-- name: GetOrderCountByStatus :many
SELECT status, COUNT(*) AS count
FROM orders
GROUP BY status
`

type GetOrderCountByStatusRow struct {
	Status string
	Count  int64
}

// Get count of orders grouped by status
func (q *Queries) GetOrderCountByStatus(ctx context.Context) ([]GetOrderCountByStatusRow, error) {
	rows, err := q.db.Query(ctx, getOrderCountByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderCountByStatusRow
	for rows.Next() {
		var i GetOrderCountByStatusRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersBySymbol = `-- name: GetOrdersBySymbol :many
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
FROM orders
WHERE symbol = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersBySymbolParams struct {
	Symbol string
	Limit  int32
	Offset int32
}

// Get orders by symbol with pagination
func (q *Queries) GetOrdersBySymbol(ctx context.Context, arg GetOrdersBySymbolParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersBySymbol, arg.Symbol, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Symbol,
			&i.OrderType,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalOrderValueByUser = `-- name: GetTotalOrderValueByUser :one
SELECT COALESCE(SUM(quantity * price), 0) AS total_value
FROM orders
WHERE user_id = $1 AND status = 'completed'
`

// Get total value of completed orders for a user
func (q *Queries) GetTotalOrderValueByUser(ctx context.Context, userID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTotalOrderValueByUser, userID)
	var total_value interface{}
	err := row.Scan(&total_value)
	return total_value, err
}

const getUserOrders = `-- name: GetUserOrders :many
SELECT o.id, o.user_id, o.symbol, o.order_type, o.quantity, o.price, o.status, o.created_at, o.updated_at
FROM orders o
JOIN users u ON u.id = o.user_id
WHERE u.id = $1
ORDER BY o.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserOrdersParams struct {
	ID     pgtype.UUID
	Limit  int32
	Offset int32
}

// Get all orders for a specific user
func (q *Queries) GetUserOrders(ctx context.Context, arg GetUserOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, getUserOrders, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Symbol,
			&i.OrderType,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrdersByUserID = `-- name: ListOrdersByUserID :many
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
FROM orders
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListOrdersByUserIDParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

// List orders by user ID with pagination
func (q *Queries) ListOrdersByUserID(ctx context.Context, arg ListOrdersByUserIDParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrdersByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Symbol,
			&i.OrderType,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET 
    symbol = COALESCE($2, symbol),
    order_type = COALESCE($3, order_type),
    quantity = COALESCE($4, quantity),
    price = COALESCE($5, price),
    status = COALESCE($6, status),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
`

type UpdateOrderParams struct {
	ID        pgtype.UUID
	Symbol    string
	OrderType string
	Quantity  pgtype.Numeric
	Price     pgtype.Numeric
	Status    string
}

// Update multiple fields of an order
func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.Symbol,
		arg.OrderType,
		arg.Quantity,
		arg.Price,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     pgtype.UUID
	Status string
}

// Update the status of an order
func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
