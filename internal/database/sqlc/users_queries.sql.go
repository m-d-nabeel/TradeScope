// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hash, avatar_url, provider, role)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, password_hash, avatar_url, provider, is_active, role, refresh_token_hash, created_at, updated_at
`

type CreateUserParams struct {
	Name         string
	Email        string
	PasswordHash pgtype.Text
	AvatarUrl    pgtype.Text
	Provider     pgtype.Text
	Role         NullRoleEnum
}

// Create a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.AvatarUrl,
		arg.Provider,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.Provider,
		&i.IsActive,
		&i.Role,
		&i.RefreshTokenHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateUser = `-- name: DeactivateUser :exec
UPDATE users
SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

// Deactivate (soft-delete) a user
func (q *Queries) DeactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateUser, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Delete a user (hard-delete)
func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, avatar_url, provider, is_active, role, refresh_token_hash, created_at, updated_at
FROM users
WHERE email = $1
`

// Get a user by email
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.Provider,
		&i.IsActive,
		&i.Role,
		&i.RefreshTokenHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT id, name, email, password_hash, avatar_url, provider, is_active, role, refresh_token_hash, created_at, updated_at
FROM users
WHERE id = $1
`

// users_queries.sql
// Get a user by ID
func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.Provider,
		&i.IsActive,
		&i.Role,
		&i.RefreshTokenHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveUsers = `-- name: ListActiveUsers :many
SELECT id, name, email, avatar_url, provider, is_active, role, created_at, updated_at
FROM users
WHERE is_active = TRUE
ORDER BY created_at DESC
`

type ListActiveUsersRow struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	AvatarUrl pgtype.Text
	Provider  pgtype.Text
	IsActive  pgtype.Bool
	Role      NullRoleEnum
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

// List all active users
func (q *Queries) ListActiveUsers(ctx context.Context) ([]ListActiveUsersRow, error) {
	rows, err := q.db.Query(ctx, listActiveUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveUsersRow
	for rows.Next() {
		var i ListActiveUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.AvatarUrl,
			&i.Provider,
			&i.IsActive,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reactivateUser = `-- name: ReactivateUser :exec
UPDATE users
SET is_active = TRUE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

// Reactivate a deactivated user
func (q *Queries) ReactivateUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, reactivateUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, email = $3, avatar_url = $4, provider = $5, role = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserParams struct {
	ID        pgtype.UUID
	Name      string
	Email     string
	AvatarUrl pgtype.Text
	Provider  pgtype.Text
	Role      NullRoleEnum
}

// Update user details (excluding password)
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.AvatarUrl,
		arg.Provider,
		arg.Role,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           pgtype.UUID
	PasswordHash pgtype.Text
}

// Update user password
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserRefreshToken = `-- name: UpdateUserRefreshToken :exec
UPDATE users
SET refresh_token_hash = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserRefreshTokenParams struct {
	ID               pgtype.UUID
	RefreshTokenHash pgtype.Text
}

// Update user refresh token hash
func (q *Queries) UpdateUserRefreshToken(ctx context.Context, arg UpdateUserRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, updateUserRefreshToken, arg.ID, arg.RefreshTokenHash)
	return err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS(
    SELECT 1 FROM users WHERE email = $1
) AS exists
`

// Check if a user with the given email exists
func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
