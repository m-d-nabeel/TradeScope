// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO
    orders (
        user_id,
        symbol,
        order_type,
        quantity,
        price,
        status
    )
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
`

type CreateOrderParams struct {
	UserID    pgtype.UUID
	Symbol    string
	OrderType string
	Quantity  pgtype.Numeric
	Price     pgtype.Numeric
	Status    string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.UserID,
		arg.Symbol,
		arg.OrderType,
		arg.Quantity,
		arg.Price,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrderByID(ctx context.Context, id pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersBySymbol = `-- name: GetOrdersBySymbol :many
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at FROM orders WHERE symbol = $1 ORDER BY created_at DESC
`

func (q *Queries) GetOrdersBySymbol(ctx context.Context, symbol string) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersBySymbol, symbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Symbol,
			&i.OrderType,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByUserID = `-- name: GetOrdersByUserID :many
SELECT id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at FROM orders WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByUserID(ctx context.Context, userID pgtype.UUID) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Symbol,
			&i.OrderType,
			&i.Quantity,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders SET status = $2 WHERE id = $1 RETURNING id, user_id, symbol, order_type, quantity, price, status, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     pgtype.UUID
	Status string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Symbol,
		&i.OrderType,
		&i.Quantity,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
