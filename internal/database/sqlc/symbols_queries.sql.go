// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: symbols_queries.sql

package sqlc

import (
	"context"
)

type CreateSymbolsBatchParams struct {
	Symbol string
	Name   string
}

const getSymbolsByName = `-- name: GetSymbolsByName :many
SELECT id, name, symbol FROM symbols
WHERE name = $1
`

func (q *Queries) GetSymbolsByName(ctx context.Context, name string) ([]Symbol, error) {
	rows, err := q.db.Query(ctx, getSymbolsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Symbol
	for rows.Next() {
		var i Symbol
		if err := rows.Scan(&i.ID, &i.Name, &i.Symbol); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSymbols = `-- name: ListSymbols :many
SELECT id, name, symbol FROM symbols
`

func (q *Queries) ListSymbols(ctx context.Context) ([]Symbol, error) {
	rows, err := q.db.Query(ctx, listSymbols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Symbol
	for rows.Next() {
		var i Symbol
		if err := rows.Scan(&i.ID, &i.Name, &i.Symbol); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateSymbols = `-- name: TruncateSymbols :exec
TRUNCATE TABLE symbols
`

func (q *Queries) TruncateSymbols(ctx context.Context) error {
	_, err := q.db.Exec(ctx, truncateSymbols)
	return err
}
