// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCreateAssetsBatch implements pgx.CopyFromSource.
type iteratorForCreateAssetsBatch struct {
	rows                 []CreateAssetsBatchParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAssetsBatch) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAssetsBatch) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].SeqID,
		r.rows[0].Class,
		r.rows[0].Exchange,
		r.rows[0].Symbol,
		r.rows[0].Name,
		r.rows[0].Tradable,
		r.rows[0].Marginable,
		r.rows[0].Shortable,
		r.rows[0].EasyToBorrow,
		r.rows[0].Fractionable,
		r.rows[0].Status,
		r.rows[0].MaintenanceMarginRequirement,
		r.rows[0].Attributes,
	}, nil
}

func (r iteratorForCreateAssetsBatch) Err() error {
	return nil
}

func (q *Queries) CreateAssetsBatch(ctx context.Context, arg []CreateAssetsBatchParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"assets"}, []string{"id", "seq_id", "class", "exchange", "symbol", "name", "tradable", "marginable", "shortable", "easy_to_borrow", "fractionable", "status", "maintenance_margin_requirement", "attributes"}, &iteratorForCreateAssetsBatch{rows: arg})
}
